package wy.addons.zsh.bs_send_channel.controller;

import wy.core.base.controller.BaseController;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.ui.Model;
import java.util.ArrayList;
import java.util.Map;
import java.util.List;
import java.util.HashMap;
import java.io.IOException;
import java.io.BufferedInputStream;
import java.io.OutputStream;
import java.io.File;
import java.util.Arrays;
import com.alibaba.fastjson.JSON;
import wy.core.base.tips.Tip;
import wy.core.node.ZTreeNode;
import wy.core.util.Convert;
import wy.core.util.DateUtil;
import java.io.FileInputStream;
import wy.core.shiro.ShiroKit;
import javax.servlet.http.HttpServletResponse;
import org.springframework.web.bind.annotation.RequestMethod;
import java.util.Date;
import net.sf.jxls.exception.ParsePropertyException;
import net.sf.jxls.transformer.XLSTransformer;
import javax.annotation.Resource;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.ui.Model;
import wy.core.log.LogObjectHolder;
import wy.core.util.DateUtil;
import wy.common.constant.factory.ConstantFactory;
import wy.config.properties.XydProperties;
import wy.addons.zsh.bs_send_channel.model.Bs_send_channel;
import org.springframework.web.bind.annotation.PathVariable;
import wy.addons.zsh.bs_send_channel.dao.Bs_send_channelDao;
import wy.addons.zsh.bs_send_channel.dao.Bs_send_channelMapper;
import wy.addons.zsh.bs_send_channel.warpper.Bs_send_channelWarpper;

/**
 * 配送商控制器
 *
 * @author wyFrame
 * @Date 2018-07-25 14:28:36
 */
@Controller
@RequestMapping("/bs_send_channel")
public class Bs_send_channelController extends BaseController {

    private String PREFIX = "/addons/zsh/bs_send_channel/";
	@Resource
	Bs_send_channelDao bs_send_channelDao;
	
	@Resource
	Bs_send_channelMapper bs_send_channelMapper;

	@Resource
    XydProperties xydProperties;
	
    /**
     * 跳转到配送商首页
     */
    @RequestMapping("")
    public String index(Model model) {
                 List<Map<String, Object>> list7 = ConstantFactory.me().getDictByName("删除状态");
                 model.addAttribute("map7",list7);
        return PREFIX + "bs_send_channel.html";
    }

    /**
     * 跳转到添加配送商
     */
    @RequestMapping("/bs_send_channel_add")
    public String bs_send_channelAdd(Model model) {
             List<Map<String, Object>> list5 = ConstantFactory.me().getDictByName("范围符");
             model.addAttribute("map5",list5);
             List<Map<String, Object>> list7 = ConstantFactory.me().getDictByName("删除状态");
             model.addAttribute("map7",list7);
                   List<Map<String, Object>> list10 = bs_send_channelDao.getMap10();
                   model.addAttribute("map10",list10);
        return PREFIX + "bs_send_channel_add.html";
    }

    /**
     * 跳转到修改配送商
     */
    @RequestMapping("/bs_send_channel_update/{bs_send_channelId}")
    public String bs_send_channelUpdate(@PathVariable Integer bs_send_channelId, Model model) {
    	Bs_send_channel bs_send_channel = this.bs_send_channelDao.queryById(bs_send_channelId);
    	model.addAttribute(bs_send_channel);
		LogObjectHolder.me().set(bs_send_channel);
                     List<Map<String, Object>> list5 = ConstantFactory.me().getDictByName("范围符");
                     model.addAttribute("map5",list5);
                     List<Map<String, Object>> list7 = ConstantFactory.me().getDictByName("删除状态");
                     model.addAttribute("map7",list7);
                                 List<Map<String, Object>> list10 = bs_send_channelDao.getMap10();
                                 model.addAttribute("map10",list10);
        return PREFIX + "bs_send_channel_edit.html";
    }

    /**
     * 点击跳转用户区域分配管理
     */
    @RequestMapping(value = "/area_assign/{channelId}")
    public String areaAssign(@PathVariable Integer channelId, Model model) {
        model.addAttribute("channelId", channelId);
        return PREFIX + "channel_areaassign.html";
    }

    /**
     * 获取配送商列表
     */
    @RequestMapping(value = "/list")
    @ResponseBody
    public Object list(String condition ,Integer xyd_st_id) {
        if(null==xyd_st_id){
        xyd_st_id=1;
        }
        List<Map<String, Object>> list = this.bs_send_channelDao.list(condition,xyd_st_id);
        return super.warpObject(new Bs_send_channelWarpper(list));
    }

    /**
     * 获取配送商列表
     */
    @RequestMapping(value = "/editList")
    @ResponseBody
    public Object editList(String condition,Integer xyd_st_id) {
        if(null==xyd_st_id){
               xyd_st_id=1;
        }
        List<Map<String, Object>> list = this.bs_send_channelDao.list(condition,xyd_st_id);
        Map<String,Object> map = new HashMap();
        map.put("code",0);
        map.put("msg","");
        map.put("count",list.size());
        map.put("data",super.warpObject(new Bs_send_channelWarpper(list)));
        return map;
    }

    /**
     * 新增配送商
     */
    @RequestMapping(value = "/add")
    @ResponseBody
    public Object add(Bs_send_channel bs_send_channel) {
        bs_send_channel.setXyd_st_id(1);
        bs_send_channel.setXyd_cre_dt(DateUtil.format(new Date(),"yyyy-MM-dd HH:mm:ss"));
        bs_send_channel.setXyd_up_dt(DateUtil.format(new Date(),"yyyy-MM-dd HH:mm:ss"));
        bs_send_channel.setId(ShiroKit.getUser().getId());
        return this.bs_send_channelMapper.insert(bs_send_channel);
    }

    /**
     * 删除配送商
     */
    @RequestMapping(value = "/delete")
    @ResponseBody
    public Object delete(@RequestParam String bs_send_channelIds) {
        //物理删除
    	//this.bs_send_channelMapper.deleteById(bs_send_channelId);
    	//逻辑删除
    	  String[] split =bs_send_channelIds.split(",");
          Integer[] iarray = new Integer[split.length];
          for(int i=0;i<split.length;i++){
              iarray[i]=Integer.parseInt(split[i]);
           }
          List<Integer> list = Arrays.asList(iarray);
    	this.bs_send_channelDao.deleteByIds(list);
        return SUCCESS_TIP;
    }

     /**
     * 修改配送商
     */
    @RequestMapping(value = "/update")
    @ResponseBody
    public Object update(Bs_send_channel bs_send_channel) {
        bs_send_channel.setXyd_up_dt(DateUtil.format(new Date(),"yyyy-MM-dd HH:mm:ss"));
        bs_send_channel.setId(ShiroKit.getUser().getId());
    	this.bs_send_channelMapper.updateById(bs_send_channel);
        return super.SUCCESS_TIP;
    }


	/**
     * 跳转到详情配送商
     */
    @RequestMapping("/bs_send_channel_detail/{bs_send_channelId}")
    public String bs_send_channelDetail(@PathVariable Integer bs_send_channelId, Model model) {
    	Bs_send_channel bs_send_channel = this.bs_send_channelDao.queryById(bs_send_channelId);
    	model.addAttribute(bs_send_channel);
                     List<Map<String, Object>> list5 = ConstantFactory.me().getDictByName("范围符");
                     model.addAttribute("map5",list5);
                     List<Map<String, Object>> list7 = ConstantFactory.me().getDictByName("删除状态");
                     model.addAttribute("map7",list7);
                                 List<Map<String, Object>> list10 = bs_send_channelDao.getMap10();
                                 model.addAttribute("map10",list10);

		LogObjectHolder.me().set(bs_send_channel);
        return PREFIX + "bs_send_channel_detail.html";
    }

    /**
     * 用户区域分配
     */
    @RequestMapping("/setAreas")
    @ResponseBody
    public Tip setAreas(@RequestParam("channelId") Integer channelId, @RequestParam("ids") String ids) {
        List<Map<String,Object>> list = new ArrayList<Map<String,Object>>();
        String[] strs = ids.split(",");
        for (String string : strs) {
            Map<String,Object> map = new HashMap<String,Object>();
            map.put("channelId",channelId);
            map.put("area_id",Integer.parseInt(string));
            list.add(map);
        }
        bs_send_channelDao.deleteAreaSC(channelId);
        bs_send_channelDao.insertAreaIdSC(list);
        return SUCCESS_TIP;
    }

    /**
     * 获取地区列表
     */
    @RequestMapping(value = "/channelTreeListById/{channelId}")
    @ResponseBody
    public List<ZTreeNode> userTreeListByUserId(@PathVariable Integer channelId) {

        List<Integer> list = bs_send_channelDao.selectAreaIdById(channelId);
        String areaid = "";
        for (Integer integer : list) {
            areaid = areaid + "," + integer;
        }
        String[] strArray = Convert.toStrArray(",", areaid);
        List<ZTreeNode> channelTreeList = this.bs_send_channelDao.areaTreeListById(strArray, channelId);
        return channelTreeList;
    }


    /**
     * 导出配送商
     */
    @RequestMapping(value = "/export", method = RequestMethod.GET)
    public void export(HttpServletResponse res)  throws ParsePropertyException, InvalidFormatException, IOException {
    	String resourcePath = "src/main/resources/excelTemplate/bs_send_channel.xls";
    	String tarPath = "src/main/resources/excel/bs_send_channel.xls";
    	String condition = null;
    	// List<Map<String, Object>> list = this.bs_send_channelDao.list(condition);
    	 Map<String, List<Map<String,Object>>> beanParams = new HashMap<String, List<Map<String,Object>>>();  
	    // beanParams.put("list", list);
	     XLSTransformer former = new XLSTransformer();  
	     former.transformXLS(resourcePath, beanParams, tarPath); 
	     
	     //下载
		String fileName = "bs_send_channel"+DateUtil.getAllTime()+".xls";
		res.setHeader("content-type", "application/octet-stream");
		res.setContentType("application/octet-stream");
		res.setHeader("Content-Disposition", "attachment;filename=" + fileName);
		byte[] buff = new byte[1024];
		BufferedInputStream bis = null;
		OutputStream os = null;
		try {
			os = res.getOutputStream();
			bis = new BufferedInputStream(new FileInputStream(new File("src/main/resources/excel/bs_send_channel.xls")));
			int i = bis.read(buff);
			while (i != -1) {
				os.write(buff, 0, buff.length);
				os.flush();
				i = bis.read(buff);
			}
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (bis != null) {
				try {
					bis.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
    }
}
